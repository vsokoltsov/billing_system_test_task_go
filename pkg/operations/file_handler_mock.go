// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/operations/file_handler.go

// Package operations is a generated GoMock package.
package operations

import (
	gomock "github.com/golang/mock/gomock"
	os "os"
	reflect "reflect"
)

// MockFileHandlingManager is a mock of FileHandlingManager interface
type MockFileHandlingManager struct {
	ctrl     *gomock.Controller
	recorder *MockFileHandlingManagerMockRecorder
}

// MockFileHandlingManagerMockRecorder is the mock recorder for MockFileHandlingManager
type MockFileHandlingManagerMockRecorder struct {
	mock *MockFileHandlingManager
}

// NewMockFileHandlingManager creates a new mock instance
func NewMockFileHandlingManager(ctrl *gomock.Controller) *MockFileHandlingManager {
	mock := &MockFileHandlingManager{ctrl: ctrl}
	mock.recorder = &MockFileHandlingManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileHandlingManager) EXPECT() *MockFileHandlingManagerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockFileHandlingManager) Create(format string) (*FileParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", format)
	ret0, _ := ret[0].(*FileParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockFileHandlingManagerMockRecorder) Create(format interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFileHandlingManager)(nil).Create), format)
}

// CreateMarshaller mocks base method
func (m *MockFileHandlingManager) CreateMarshaller(file *os.File, format string, csvWriter CSVWriter) (FileMarshallingManager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMarshaller", file, format, csvWriter)
	ret0, _ := ret[0].(FileMarshallingManager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMarshaller indicates an expected call of CreateMarshaller
func (mr *MockFileHandlingManagerMockRecorder) CreateMarshaller(file, format, csvWriter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMarshaller", reflect.TypeOf((*MockFileHandlingManager)(nil).CreateMarshaller), file, format, csvWriter)
}

// MockFileStorageManager is a mock of FileStorageManager interface
type MockFileStorageManager struct {
	ctrl     *gomock.Controller
	recorder *MockFileStorageManagerMockRecorder
}

// MockFileStorageManagerMockRecorder is the mock recorder for MockFileStorageManager
type MockFileStorageManagerMockRecorder struct {
	mock *MockFileStorageManager
}

// NewMockFileStorageManager creates a new mock instance
func NewMockFileStorageManager(ctrl *gomock.Controller) *MockFileStorageManager {
	mock := &MockFileStorageManager{ctrl: ctrl}
	mock.recorder = &MockFileStorageManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileStorageManager) EXPECT() *MockFileStorageManagerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockFileStorageManager) Create(path string, flag int, perm os.FileMode) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", path, flag, perm)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockFileStorageManagerMockRecorder) Create(path, flag, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFileStorageManager)(nil).Create), path, flag, perm)
}
