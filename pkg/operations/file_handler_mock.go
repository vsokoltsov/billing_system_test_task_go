// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/operations/file_handler.go

// Package operations is a generated GoMock package.
package operations

import (
	csv "encoding/csv"
	gomock "github.com/golang/mock/gomock"
	os "os"
	reflect "reflect"
)

// MockIFileHandling is a mock of IFileHandling interface
type MockIFileHandling struct {
	ctrl     *gomock.Controller
	recorder *MockIFileHandlingMockRecorder
}

// MockIFileHandlingMockRecorder is the mock recorder for MockIFileHandling
type MockIFileHandlingMockRecorder struct {
	mock *MockIFileHandling
}

// NewMockIFileHandling creates a new mock instance
func NewMockIFileHandling(ctrl *gomock.Controller) *MockIFileHandling {
	mock := &MockIFileHandling{ctrl: ctrl}
	mock.recorder = &MockIFileHandlingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIFileHandling) EXPECT() *MockIFileHandlingMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockIFileHandling) Create(format string) (*FileParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", format)
	ret0, _ := ret[0].(*FileParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockIFileHandlingMockRecorder) Create(format interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIFileHandling)(nil).Create), format)
}

// CreateMarshaller mocks base method
func (m *MockIFileHandling) CreateMarshaller(file *os.File, format string, csvWriter *csv.Writer) IFileMarshaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMarshaller", file, format, csvWriter)
	ret0, _ := ret[0].(IFileMarshaller)
	return ret0
}

// CreateMarshaller indicates an expected call of CreateMarshaller
func (mr *MockIFileHandlingMockRecorder) CreateMarshaller(file, format, csvWriter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMarshaller", reflect.TypeOf((*MockIFileHandling)(nil).CreateMarshaller), file, format, csvWriter)
}

// MockIFileStorage is a mock of IFileStorage interface
type MockIFileStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIFileStorageMockRecorder
}

// MockIFileStorageMockRecorder is the mock recorder for MockIFileStorage
type MockIFileStorageMockRecorder struct {
	mock *MockIFileStorage
}

// NewMockIFileStorage creates a new mock instance
func NewMockIFileStorage(ctrl *gomock.Controller) *MockIFileStorage {
	mock := &MockIFileStorage{ctrl: ctrl}
	mock.recorder = &MockIFileStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIFileStorage) EXPECT() *MockIFileStorageMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockIFileStorage) Create(path string, flag int, perm os.FileMode) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", path, flag, perm)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockIFileStorageMockRecorder) Create(path, flag, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIFileStorage)(nil).Create), path, flag, perm)
}
