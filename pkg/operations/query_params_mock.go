// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/operations/query_params.go

// Package operations is a generated GoMock package.
package operations

import (
	gomock "github.com/golang/mock/gomock"
	url "net/url"
	reflect "reflect"
)

// MockIQueryParamsReader is a mock of IQueryParamsReader interface
type MockIQueryParamsReader struct {
	ctrl     *gomock.Controller
	recorder *MockIQueryParamsReaderMockRecorder
}

// MockIQueryParamsReaderMockRecorder is the mock recorder for MockIQueryParamsReader
type MockIQueryParamsReaderMockRecorder struct {
	mock *MockIQueryParamsReader
}

// NewMockIQueryParamsReader creates a new mock instance
func NewMockIQueryParamsReader(ctrl *gomock.Controller) *MockIQueryParamsReader {
	mock := &MockIQueryParamsReader{ctrl: ctrl}
	mock.recorder = &MockIQueryParamsReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIQueryParamsReader) EXPECT() *MockIQueryParamsReaderMockRecorder {
	return m.recorder
}

// Parse mocks base method
func (m *MockIQueryParamsReader) Parse(query url.Values) (*QueryParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", query)
	ret0, _ := ret[0].(*QueryParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse
func (mr *MockIQueryParamsReaderMockRecorder) Parse(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockIQueryParamsReader)(nil).Parse), query)
}
