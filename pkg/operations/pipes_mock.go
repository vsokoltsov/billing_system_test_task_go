// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/operations/pipes.go

// Package operations is a generated GoMock package.
package operations

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIOperationsProcessesManager is a mock of IOperationsProcessesManager interface
type MockIOperationsProcessesManager struct {
	ctrl     *gomock.Controller
	recorder *MockIOperationsProcessesManagerMockRecorder
}

// MockIOperationsProcessesManagerMockRecorder is the mock recorder for MockIOperationsProcessesManager
type MockIOperationsProcessesManagerMockRecorder struct {
	mock *MockIOperationsProcessesManager
}

// NewMockIOperationsProcessesManager creates a new mock instance
func NewMockIOperationsProcessesManager(ctrl *gomock.Controller) *MockIOperationsProcessesManager {
	mock := &MockIOperationsProcessesManager{ctrl: ctrl}
	mock.recorder = &MockIOperationsProcessesManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIOperationsProcessesManager) EXPECT() *MockIOperationsProcessesManagerMockRecorder {
	return m.recorder
}

// Process mocks base method
func (m *MockIOperationsProcessesManager) Process(ctx context.Context, or OperationsManager, listParams *ListParams, marshaller FileMarshallingManager) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, or, listParams, marshaller)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process
func (mr *MockIOperationsProcessesManagerMockRecorder) Process(ctx, or, listParams, marshaller interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockIOperationsProcessesManager)(nil).Process), ctx, or, listParams, marshaller)
}
