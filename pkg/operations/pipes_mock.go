// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/operations/pipes.go

// Package operations is a generated GoMock package.
package operations

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPipelineManager is a mock of PipelineManager interface
type MockPipelineManager struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineManagerMockRecorder
}

// MockPipelineManagerMockRecorder is the mock recorder for MockPipelineManager
type MockPipelineManagerMockRecorder struct {
	mock *MockPipelineManager
}

// NewMockPipelineManager creates a new mock instance
func NewMockPipelineManager(ctrl *gomock.Controller) *MockPipelineManager {
	mock := &MockPipelineManager{ctrl: ctrl}
	mock.recorder = &MockPipelineManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPipelineManager) EXPECT() *MockPipelineManagerMockRecorder {
	return m.recorder
}

// Process mocks base method
func (m *MockPipelineManager) Process(ctx context.Context, or OperationsManager, listParams *ListParams, marshaller FileMarshallingManager) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, or, listParams, marshaller)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process
func (mr *MockPipelineManagerMockRecorder) Process(ctx, or, listParams, marshaller interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockPipelineManager)(nil).Process), ctx, or, listParams, marshaller)
}
