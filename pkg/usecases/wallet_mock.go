// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/usecases/wallet.go

// Package usecases is a generated GoMock package.
package usecases

import (
	adapters "billing_system_test_task/pkg/adapters"
	context "context"
	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
	reflect "reflect"
)

// MockWalletUseCase is a mock of WalletUseCase interface
type MockWalletUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockWalletUseCaseMockRecorder
}

// MockWalletUseCaseMockRecorder is the mock recorder for MockWalletUseCase
type MockWalletUseCaseMockRecorder struct {
	mock *MockWalletUseCase
}

// NewMockWalletUseCase creates a new mock instance
func NewMockWalletUseCase(ctrl *gomock.Controller) *MockWalletUseCase {
	mock := &MockWalletUseCase{ctrl: ctrl}
	mock.recorder = &MockWalletUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWalletUseCase) EXPECT() *MockWalletUseCaseMockRecorder {
	return m.recorder
}

// Transfer mocks base method
func (m *MockWalletUseCase) Transfer(ctx context.Context, walletFrom, walletTo int, amount decimal.Decimal) (int, adapters.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, walletFrom, walletTo, amount)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(adapters.Error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer
func (mr *MockWalletUseCaseMockRecorder) Transfer(ctx, walletFrom, walletTo, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockWalletUseCase)(nil).Transfer), ctx, walletFrom, walletTo, amount)
}
