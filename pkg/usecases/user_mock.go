// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/usecases/user.go

// Package usecases is a generated GoMock package.
package usecases

import (
	adapters "billing_system_test_task/pkg/adapters"
	entities "billing_system_test_task/pkg/entities"
	context "context"
	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
	reflect "reflect"
)

// MockUserUseCase is a mock of UserUseCase interface
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUserUseCase) Create(ctx context.Context, email string) (*entities.User, adapters.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, email)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(adapters.Error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUserUseCaseMockRecorder) Create(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserUseCase)(nil).Create), ctx, email)
}

// Enroll mocks base method
func (m *MockUserUseCase) Enroll(ctx context.Context, userID int, amount decimal.Decimal) (*entities.User, adapters.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enroll", ctx, userID, amount)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(adapters.Error)
	return ret0, ret1
}

// Enroll indicates an expected call of Enroll
func (mr *MockUserUseCaseMockRecorder) Enroll(ctx, userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enroll", reflect.TypeOf((*MockUserUseCase)(nil).Enroll), ctx, userID, amount)
}
