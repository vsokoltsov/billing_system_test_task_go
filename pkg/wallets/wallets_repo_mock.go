// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/wallets/repo.go

// Package wallets is a generated GoMock package.
package wallets

import (
	context "context"
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
	reflect "reflect"
)

// MockWalletsManager is a mock of WalletsManager interface
type MockWalletsManager struct {
	ctrl     *gomock.Controller
	recorder *MockWalletsManagerMockRecorder
}

// MockWalletsManagerMockRecorder is the mock recorder for MockWalletsManager
type MockWalletsManagerMockRecorder struct {
	mock *MockWalletsManager
}

// NewMockWalletsManager creates a new mock instance
func NewMockWalletsManager(ctrl *gomock.Controller) *MockWalletsManager {
	mock := &MockWalletsManager{ctrl: ctrl}
	mock.recorder = &MockWalletsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWalletsManager) EXPECT() *MockWalletsManagerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockWalletsManager) Create(ctx context.Context, tx *sql.Tx, userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tx, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockWalletsManagerMockRecorder) Create(ctx, tx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWalletsManager)(nil).Create), ctx, tx, userID)
}

// Enroll mocks base method
func (m *MockWalletsManager) Enroll(ctx context.Context, walletID int, amount decimal.Decimal) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enroll", ctx, walletID, amount)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enroll indicates an expected call of Enroll
func (mr *MockWalletsManagerMockRecorder) Enroll(ctx, walletID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enroll", reflect.TypeOf((*MockWalletsManager)(nil).Enroll), ctx, walletID, amount)
}

// GetByUserId mocks base method
func (m *MockWalletsManager) GetByUserId(ctx context.Context, userID int) (*Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserId", ctx, userID)
	ret0, _ := ret[0].(*Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserId indicates an expected call of GetByUserId
func (mr *MockWalletsManagerMockRecorder) GetByUserId(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserId", reflect.TypeOf((*MockWalletsManager)(nil).GetByUserId), ctx, userID)
}

// GetByID mocks base method
func (m *MockWalletsManager) GetByID(ctx context.Context, walletID int) (*Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, walletID)
	ret0, _ := ret[0].(*Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockWalletsManagerMockRecorder) GetByID(ctx, walletID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockWalletsManager)(nil).GetByID), ctx, walletID)
}

// Transfer mocks base method
func (m *MockWalletsManager) Transfer(ctx context.Context, walletFrom, walletTo int, amount decimal.Decimal) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, walletFrom, walletTo, amount)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer
func (mr *MockWalletsManagerMockRecorder) Transfer(ctx, walletFrom, walletTo, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockWalletsManager)(nil).Transfer), ctx, walletFrom, walletTo, amount)
}
