// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/users/": {
            "post": {
                "description": "Create new user and wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create new user",
                "parameters": [
                    {
                        "description": "User attributes",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.UserForm"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create user response",
                        "schema": {
                            "$ref": "#/definitions/users.UserSerializer"
                        }
                    },
                    "400": {
                        "description": "User form validation error",
                        "schema": {
                            "$ref": "#/definitions/utils.FormErrorSerializer"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorMsg"
                        }
                    }
                }
            }
        },
        "/api/users/{id}/enroll/": {
            "post": {
                "description": "Enroll particular users wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Enroll wallet",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Enrollment attributes",
                        "name": "enroll",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.EnrollForm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieving user information with updated balance",
                        "schema": {
                            "$ref": "#/definitions/users.UserSerializer"
                        }
                    },
                    "400": {
                        "description": "Enroll form validation error",
                        "schema": {
                            "$ref": "#/definitions/utils.FormErrorSerializer"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorMsg"
                        }
                    }
                }
            }
        },
        "/api/wallets/transfer/": {
            "post": {
                "description": "Transfer funds between two users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallets"
                ],
                "summary": "Transfer funds",
                "parameters": [
                    {
                        "description": "Transfer parameters",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/wallets.WalletForm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wallet from id",
                        "schema": {
                            "$ref": "#/definitions/wallets.walletSerializer"
                        }
                    },
                    "400": {
                        "description": "Wallet transfer validation error",
                        "schema": {
                            "$ref": "#/definitions/utils.FormErrorSerializer"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorMsg"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "users.EnrollForm": {
            "type": "object",
            "required": [
                "amount"
            ],
            "properties": {
                "amount": {
                    "type": "number"
                }
            }
        },
        "users.UserForm": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "users.UserSerializer": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "utils.ErrorMsg": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "utils.FormErrorSerializer": {
            "type": "object",
            "properties": {
                "messages": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "wallets.WalletForm": {
            "type": "object",
            "required": [
                "amount",
                "wallet_from",
                "wallet_to"
            ],
            "properties": {
                "amount": {
                    "type": "number"
                },
                "wallet_from": {
                    "type": "integer"
                },
                "wallet_to": {
                    "type": "integer"
                }
            }
        },
        "wallets.walletSerializer": {
            "type": "object",
            "properties": {
                "wallet_from": {
                    "type": "integer"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8000",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Billing System API",
	Description: "Simple billing system",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
