// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/reports/file_handler.go

// Package reports is a generated GoMock package.
package reports

import (
	entities "billing_system_test_task/internal/entities"
	gomock "github.com/golang/mock/gomock"
	os "os"
	reflect "reflect"
)

// MockFileWithMetadata is a mock of FileWithMetadata interface
type MockFileWithMetadata struct {
	ctrl     *gomock.Controller
	recorder *MockFileWithMetadataMockRecorder
}

// MockFileWithMetadataMockRecorder is the mock recorder for MockFileWithMetadata
type MockFileWithMetadataMockRecorder struct {
	mock *MockFileWithMetadata
}

// NewMockFileWithMetadata creates a new mock instance
func NewMockFileWithMetadata(ctrl *gomock.Controller) *MockFileWithMetadata {
	mock := &MockFileWithMetadata{ctrl: ctrl}
	mock.recorder = &MockFileWithMetadataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileWithMetadata) EXPECT() *MockFileWithMetadataMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockFileWithMetadata) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockFileWithMetadataMockRecorder) Read(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockFileWithMetadata)(nil).Read), p)
}

// Stat mocks base method
func (m *MockFileWithMetadata) Stat() (os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat")
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat
func (mr *MockFileWithMetadataMockRecorder) Stat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockFileWithMetadata)(nil).Stat))
}

// MockFileHandlingManager is a mock of FileHandlingManager interface
type MockFileHandlingManager struct {
	ctrl     *gomock.Controller
	recorder *MockFileHandlingManagerMockRecorder
}

// MockFileHandlingManagerMockRecorder is the mock recorder for MockFileHandlingManager
type MockFileHandlingManagerMockRecorder struct {
	mock *MockFileHandlingManager
}

// NewMockFileHandlingManager creates a new mock instance
func NewMockFileHandlingManager(ctrl *gomock.Controller) *MockFileHandlingManager {
	mock := &MockFileHandlingManager{ctrl: ctrl}
	mock.recorder = &MockFileHandlingManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileHandlingManager) EXPECT() *MockFileHandlingManagerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockFileHandlingManager) Create(format string) (*entities.FileParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", format)
	ret0, _ := ret[0].(*entities.FileParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockFileHandlingManagerMockRecorder) Create(format interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFileHandlingManager)(nil).Create), format)
}

// CreateMarshaller mocks base method
func (m *MockFileHandlingManager) CreateMarshaller(file *os.File, format string, csvWriter CSVWriter) (FileMarshallingManager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMarshaller", file, format, csvWriter)
	ret0, _ := ret[0].(FileMarshallingManager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMarshaller indicates an expected call of CreateMarshaller
func (mr *MockFileHandlingManagerMockRecorder) CreateMarshaller(file, format, csvWriter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMarshaller", reflect.TypeOf((*MockFileHandlingManager)(nil).CreateMarshaller), file, format, csvWriter)
}

// GetFileMetadata mocks base method
func (m *MockFileHandlingManager) GetFileMetadata(file FileWithMetadata) (*entities.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileMetadata", file)
	ret0, _ := ret[0].(*entities.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileMetadata indicates an expected call of GetFileMetadata
func (mr *MockFileHandlingManagerMockRecorder) GetFileMetadata(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileMetadata", reflect.TypeOf((*MockFileHandlingManager)(nil).GetFileMetadata), file)
}

// MockFileStorageManager is a mock of FileStorageManager interface
type MockFileStorageManager struct {
	ctrl     *gomock.Controller
	recorder *MockFileStorageManagerMockRecorder
}

// MockFileStorageManagerMockRecorder is the mock recorder for MockFileStorageManager
type MockFileStorageManagerMockRecorder struct {
	mock *MockFileStorageManager
}

// NewMockFileStorageManager creates a new mock instance
func NewMockFileStorageManager(ctrl *gomock.Controller) *MockFileStorageManager {
	mock := &MockFileStorageManager{ctrl: ctrl}
	mock.recorder = &MockFileStorageManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileStorageManager) EXPECT() *MockFileStorageManagerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockFileStorageManager) Create(path string, flag int, perm os.FileMode) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", path, flag, perm)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockFileStorageManagerMockRecorder) Create(path, flag, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFileStorageManager)(nil).Create), path, flag, perm)
}
